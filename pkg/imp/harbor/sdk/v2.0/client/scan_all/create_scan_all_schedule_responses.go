// Code generated by go-swagger; DO NOT EDIT.

package scan_all

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// CreateScanAllScheduleReader is a Reader for the CreateScanAllSchedule structure.
type CreateScanAllScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScanAllScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateScanAllScheduleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScanAllScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScanAllScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScanAllScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateScanAllScheduleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewCreateScanAllSchedulePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateScanAllScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScanAllScheduleCreated creates a CreateScanAllScheduleCreated with default headers values
func NewCreateScanAllScheduleCreated() *CreateScanAllScheduleCreated {
	return &CreateScanAllScheduleCreated{}
}

/*
CreateScanAllScheduleCreated describes a response with status code 201, with default header values.

Created
*/
type CreateScanAllScheduleCreated struct {

	/* The location of the resource
	 */
	Location string

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this create scan all schedule created response has a 2xx status code
func (o *CreateScanAllScheduleCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create scan all schedule created response has a 3xx status code
func (o *CreateScanAllScheduleCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule created response has a 4xx status code
func (o *CreateScanAllScheduleCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scan all schedule created response has a 5xx status code
func (o *CreateScanAllScheduleCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule created response a status code equal to that given
func (o *CreateScanAllScheduleCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateScanAllScheduleCreated) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleCreated ", 201)
}

func (o *CreateScanAllScheduleCreated) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleCreated ", 201)
}

func (o *CreateScanAllScheduleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewCreateScanAllScheduleBadRequest creates a CreateScanAllScheduleBadRequest with default headers values
func NewCreateScanAllScheduleBadRequest() *CreateScanAllScheduleBadRequest {
	return &CreateScanAllScheduleBadRequest{}
}

/*
CreateScanAllScheduleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateScanAllScheduleBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule bad request response has a 2xx status code
func (o *CreateScanAllScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule bad request response has a 3xx status code
func (o *CreateScanAllScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule bad request response has a 4xx status code
func (o *CreateScanAllScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scan all schedule bad request response has a 5xx status code
func (o *CreateScanAllScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule bad request response a status code equal to that given
func (o *CreateScanAllScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateScanAllScheduleBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScanAllScheduleBadRequest) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScanAllScheduleBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScanAllScheduleUnauthorized creates a CreateScanAllScheduleUnauthorized with default headers values
func NewCreateScanAllScheduleUnauthorized() *CreateScanAllScheduleUnauthorized {
	return &CreateScanAllScheduleUnauthorized{}
}

/*
CreateScanAllScheduleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateScanAllScheduleUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule unauthorized response has a 2xx status code
func (o *CreateScanAllScheduleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule unauthorized response has a 3xx status code
func (o *CreateScanAllScheduleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule unauthorized response has a 4xx status code
func (o *CreateScanAllScheduleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scan all schedule unauthorized response has a 5xx status code
func (o *CreateScanAllScheduleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule unauthorized response a status code equal to that given
func (o *CreateScanAllScheduleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateScanAllScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScanAllScheduleUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScanAllScheduleUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScanAllScheduleForbidden creates a CreateScanAllScheduleForbidden with default headers values
func NewCreateScanAllScheduleForbidden() *CreateScanAllScheduleForbidden {
	return &CreateScanAllScheduleForbidden{}
}

/*
CreateScanAllScheduleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateScanAllScheduleForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule forbidden response has a 2xx status code
func (o *CreateScanAllScheduleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule forbidden response has a 3xx status code
func (o *CreateScanAllScheduleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule forbidden response has a 4xx status code
func (o *CreateScanAllScheduleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scan all schedule forbidden response has a 5xx status code
func (o *CreateScanAllScheduleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule forbidden response a status code equal to that given
func (o *CreateScanAllScheduleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateScanAllScheduleForbidden) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleForbidden  %+v", 403, o.Payload)
}

func (o *CreateScanAllScheduleForbidden) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleForbidden  %+v", 403, o.Payload)
}

func (o *CreateScanAllScheduleForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScanAllScheduleConflict creates a CreateScanAllScheduleConflict with default headers values
func NewCreateScanAllScheduleConflict() *CreateScanAllScheduleConflict {
	return &CreateScanAllScheduleConflict{}
}

/*
CreateScanAllScheduleConflict describes a response with status code 409, with default header values.

Conflict
*/
type CreateScanAllScheduleConflict struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule conflict response has a 2xx status code
func (o *CreateScanAllScheduleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule conflict response has a 3xx status code
func (o *CreateScanAllScheduleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule conflict response has a 4xx status code
func (o *CreateScanAllScheduleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scan all schedule conflict response has a 5xx status code
func (o *CreateScanAllScheduleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule conflict response a status code equal to that given
func (o *CreateScanAllScheduleConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateScanAllScheduleConflict) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleConflict  %+v", 409, o.Payload)
}

func (o *CreateScanAllScheduleConflict) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleConflict  %+v", 409, o.Payload)
}

func (o *CreateScanAllScheduleConflict) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllScheduleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScanAllSchedulePreconditionFailed creates a CreateScanAllSchedulePreconditionFailed with default headers values
func NewCreateScanAllSchedulePreconditionFailed() *CreateScanAllSchedulePreconditionFailed {
	return &CreateScanAllSchedulePreconditionFailed{}
}

/*
CreateScanAllSchedulePreconditionFailed describes a response with status code 412, with default header values.

Precondition failed
*/
type CreateScanAllSchedulePreconditionFailed struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule precondition failed response has a 2xx status code
func (o *CreateScanAllSchedulePreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule precondition failed response has a 3xx status code
func (o *CreateScanAllSchedulePreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule precondition failed response has a 4xx status code
func (o *CreateScanAllSchedulePreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scan all schedule precondition failed response has a 5xx status code
func (o *CreateScanAllSchedulePreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this create scan all schedule precondition failed response a status code equal to that given
func (o *CreateScanAllSchedulePreconditionFailed) IsCode(code int) bool {
	return code == 412
}

func (o *CreateScanAllSchedulePreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllSchedulePreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateScanAllSchedulePreconditionFailed) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllSchedulePreconditionFailed  %+v", 412, o.Payload)
}

func (o *CreateScanAllSchedulePreconditionFailed) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllSchedulePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScanAllScheduleInternalServerError creates a CreateScanAllScheduleInternalServerError with default headers values
func NewCreateScanAllScheduleInternalServerError() *CreateScanAllScheduleInternalServerError {
	return &CreateScanAllScheduleInternalServerError{}
}

/*
CreateScanAllScheduleInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CreateScanAllScheduleInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scan all schedule internal server error response has a 2xx status code
func (o *CreateScanAllScheduleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scan all schedule internal server error response has a 3xx status code
func (o *CreateScanAllScheduleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scan all schedule internal server error response has a 4xx status code
func (o *CreateScanAllScheduleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scan all schedule internal server error response has a 5xx status code
func (o *CreateScanAllScheduleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create scan all schedule internal server error response a status code equal to that given
func (o *CreateScanAllScheduleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateScanAllScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScanAllScheduleInternalServerError) String() string {
	return fmt.Sprintf("[POST /system/scanAll/schedule][%d] createScanAllScheduleInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScanAllScheduleInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScanAllScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
