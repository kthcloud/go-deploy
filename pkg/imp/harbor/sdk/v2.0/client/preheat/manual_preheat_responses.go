// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// ManualPreheatReader is a Reader for the ManualPreheat structure.
type ManualPreheatReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ManualPreheatReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewManualPreheatCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewManualPreheatBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewManualPreheatUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewManualPreheatForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewManualPreheatNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewManualPreheatInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewManualPreheatCreated creates a ManualPreheatCreated with default headers values
func NewManualPreheatCreated() *ManualPreheatCreated {
	return &ManualPreheatCreated{}
}

/*
ManualPreheatCreated describes a response with status code 201, with default header values.

Created
*/
type ManualPreheatCreated struct {

	/* The location of the resource
	 */
	Location string

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this manual preheat created response has a 2xx status code
func (o *ManualPreheatCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this manual preheat created response has a 3xx status code
func (o *ManualPreheatCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat created response has a 4xx status code
func (o *ManualPreheatCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this manual preheat created response has a 5xx status code
func (o *ManualPreheatCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this manual preheat created response a status code equal to that given
func (o *ManualPreheatCreated) IsCode(code int) bool {
	return code == 201
}

func (o *ManualPreheatCreated) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatCreated ", 201)
}

func (o *ManualPreheatCreated) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatCreated ", 201)
}

func (o *ManualPreheatCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewManualPreheatBadRequest creates a ManualPreheatBadRequest with default headers values
func NewManualPreheatBadRequest() *ManualPreheatBadRequest {
	return &ManualPreheatBadRequest{}
}

/*
ManualPreheatBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ManualPreheatBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this manual preheat bad request response has a 2xx status code
func (o *ManualPreheatBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manual preheat bad request response has a 3xx status code
func (o *ManualPreheatBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat bad request response has a 4xx status code
func (o *ManualPreheatBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this manual preheat bad request response has a 5xx status code
func (o *ManualPreheatBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this manual preheat bad request response a status code equal to that given
func (o *ManualPreheatBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ManualPreheatBadRequest) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatBadRequest  %+v", 400, o.Payload)
}

func (o *ManualPreheatBadRequest) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatBadRequest  %+v", 400, o.Payload)
}

func (o *ManualPreheatBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ManualPreheatBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManualPreheatUnauthorized creates a ManualPreheatUnauthorized with default headers values
func NewManualPreheatUnauthorized() *ManualPreheatUnauthorized {
	return &ManualPreheatUnauthorized{}
}

/*
ManualPreheatUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ManualPreheatUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this manual preheat unauthorized response has a 2xx status code
func (o *ManualPreheatUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manual preheat unauthorized response has a 3xx status code
func (o *ManualPreheatUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat unauthorized response has a 4xx status code
func (o *ManualPreheatUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this manual preheat unauthorized response has a 5xx status code
func (o *ManualPreheatUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this manual preheat unauthorized response a status code equal to that given
func (o *ManualPreheatUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ManualPreheatUnauthorized) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatUnauthorized  %+v", 401, o.Payload)
}

func (o *ManualPreheatUnauthorized) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatUnauthorized  %+v", 401, o.Payload)
}

func (o *ManualPreheatUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ManualPreheatUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManualPreheatForbidden creates a ManualPreheatForbidden with default headers values
func NewManualPreheatForbidden() *ManualPreheatForbidden {
	return &ManualPreheatForbidden{}
}

/*
ManualPreheatForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ManualPreheatForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this manual preheat forbidden response has a 2xx status code
func (o *ManualPreheatForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manual preheat forbidden response has a 3xx status code
func (o *ManualPreheatForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat forbidden response has a 4xx status code
func (o *ManualPreheatForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this manual preheat forbidden response has a 5xx status code
func (o *ManualPreheatForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this manual preheat forbidden response a status code equal to that given
func (o *ManualPreheatForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ManualPreheatForbidden) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatForbidden  %+v", 403, o.Payload)
}

func (o *ManualPreheatForbidden) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatForbidden  %+v", 403, o.Payload)
}

func (o *ManualPreheatForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ManualPreheatForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManualPreheatNotFound creates a ManualPreheatNotFound with default headers values
func NewManualPreheatNotFound() *ManualPreheatNotFound {
	return &ManualPreheatNotFound{}
}

/*
ManualPreheatNotFound describes a response with status code 404, with default header values.

Not found
*/
type ManualPreheatNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this manual preheat not found response has a 2xx status code
func (o *ManualPreheatNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manual preheat not found response has a 3xx status code
func (o *ManualPreheatNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat not found response has a 4xx status code
func (o *ManualPreheatNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this manual preheat not found response has a 5xx status code
func (o *ManualPreheatNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this manual preheat not found response a status code equal to that given
func (o *ManualPreheatNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ManualPreheatNotFound) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatNotFound  %+v", 404, o.Payload)
}

func (o *ManualPreheatNotFound) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatNotFound  %+v", 404, o.Payload)
}

func (o *ManualPreheatNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ManualPreheatNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManualPreheatInternalServerError creates a ManualPreheatInternalServerError with default headers values
func NewManualPreheatInternalServerError() *ManualPreheatInternalServerError {
	return &ManualPreheatInternalServerError{}
}

/*
ManualPreheatInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ManualPreheatInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this manual preheat internal server error response has a 2xx status code
func (o *ManualPreheatInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this manual preheat internal server error response has a 3xx status code
func (o *ManualPreheatInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this manual preheat internal server error response has a 4xx status code
func (o *ManualPreheatInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this manual preheat internal server error response has a 5xx status code
func (o *ManualPreheatInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this manual preheat internal server error response a status code equal to that given
func (o *ManualPreheatInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ManualPreheatInternalServerError) Error() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatInternalServerError  %+v", 500, o.Payload)
}

func (o *ManualPreheatInternalServerError) String() string {
	return fmt.Sprintf("[POST /projects/{project_name}/preheat/policies/{preheat_policy_name}][%d] manualPreheatInternalServerError  %+v", 500, o.Payload)
}

func (o *ManualPreheatInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ManualPreheatInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
