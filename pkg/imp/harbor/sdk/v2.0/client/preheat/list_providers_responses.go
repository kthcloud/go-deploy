// Code generated by go-swagger; DO NOT EDIT.

package preheat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// ListProvidersReader is a Reader for the ListProviders structure.
type ListProvidersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListProvidersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListProvidersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListProvidersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListProvidersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListProvidersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListProvidersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListProvidersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListProvidersOK creates a ListProvidersOK with default headers values
func NewListProvidersOK() *ListProvidersOK {
	return &ListProvidersOK{}
}

/*
ListProvidersOK describes a response with status code 200, with default header values.

Success
*/
type ListProvidersOK struct {
	Payload []*models.Metadata
}

// IsSuccess returns true when this list providers o k response has a 2xx status code
func (o *ListProvidersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list providers o k response has a 3xx status code
func (o *ListProvidersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers o k response has a 4xx status code
func (o *ListProvidersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list providers o k response has a 5xx status code
func (o *ListProvidersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list providers o k response a status code equal to that given
func (o *ListProvidersOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListProvidersOK) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersOK  %+v", 200, o.Payload)
}

func (o *ListProvidersOK) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersOK  %+v", 200, o.Payload)
}

func (o *ListProvidersOK) GetPayload() []*models.Metadata {
	return o.Payload
}

func (o *ListProvidersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProvidersBadRequest creates a ListProvidersBadRequest with default headers values
func NewListProvidersBadRequest() *ListProvidersBadRequest {
	return &ListProvidersBadRequest{}
}

/*
ListProvidersBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ListProvidersBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list providers bad request response has a 2xx status code
func (o *ListProvidersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list providers bad request response has a 3xx status code
func (o *ListProvidersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers bad request response has a 4xx status code
func (o *ListProvidersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list providers bad request response has a 5xx status code
func (o *ListProvidersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list providers bad request response a status code equal to that given
func (o *ListProvidersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListProvidersBadRequest) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersBadRequest  %+v", 400, o.Payload)
}

func (o *ListProvidersBadRequest) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersBadRequest  %+v", 400, o.Payload)
}

func (o *ListProvidersBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListProvidersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProvidersUnauthorized creates a ListProvidersUnauthorized with default headers values
func NewListProvidersUnauthorized() *ListProvidersUnauthorized {
	return &ListProvidersUnauthorized{}
}

/*
ListProvidersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListProvidersUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list providers unauthorized response has a 2xx status code
func (o *ListProvidersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list providers unauthorized response has a 3xx status code
func (o *ListProvidersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers unauthorized response has a 4xx status code
func (o *ListProvidersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list providers unauthorized response has a 5xx status code
func (o *ListProvidersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list providers unauthorized response a status code equal to that given
func (o *ListProvidersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListProvidersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListProvidersUnauthorized) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListProvidersUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListProvidersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProvidersForbidden creates a ListProvidersForbidden with default headers values
func NewListProvidersForbidden() *ListProvidersForbidden {
	return &ListProvidersForbidden{}
}

/*
ListProvidersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListProvidersForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list providers forbidden response has a 2xx status code
func (o *ListProvidersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list providers forbidden response has a 3xx status code
func (o *ListProvidersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers forbidden response has a 4xx status code
func (o *ListProvidersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list providers forbidden response has a 5xx status code
func (o *ListProvidersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list providers forbidden response a status code equal to that given
func (o *ListProvidersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListProvidersForbidden) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersForbidden  %+v", 403, o.Payload)
}

func (o *ListProvidersForbidden) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersForbidden  %+v", 403, o.Payload)
}

func (o *ListProvidersForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListProvidersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProvidersNotFound creates a ListProvidersNotFound with default headers values
func NewListProvidersNotFound() *ListProvidersNotFound {
	return &ListProvidersNotFound{}
}

/*
ListProvidersNotFound describes a response with status code 404, with default header values.

Not found
*/
type ListProvidersNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list providers not found response has a 2xx status code
func (o *ListProvidersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list providers not found response has a 3xx status code
func (o *ListProvidersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers not found response has a 4xx status code
func (o *ListProvidersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list providers not found response has a 5xx status code
func (o *ListProvidersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list providers not found response a status code equal to that given
func (o *ListProvidersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListProvidersNotFound) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersNotFound  %+v", 404, o.Payload)
}

func (o *ListProvidersNotFound) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersNotFound  %+v", 404, o.Payload)
}

func (o *ListProvidersNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListProvidersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProvidersInternalServerError creates a ListProvidersInternalServerError with default headers values
func NewListProvidersInternalServerError() *ListProvidersInternalServerError {
	return &ListProvidersInternalServerError{}
}

/*
ListProvidersInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ListProvidersInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list providers internal server error response has a 2xx status code
func (o *ListProvidersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list providers internal server error response has a 3xx status code
func (o *ListProvidersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list providers internal server error response has a 4xx status code
func (o *ListProvidersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list providers internal server error response has a 5xx status code
func (o *ListProvidersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list providers internal server error response a status code equal to that given
func (o *ListProvidersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListProvidersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListProvidersInternalServerError) String() string {
	return fmt.Sprintf("[GET /p2p/preheat/providers][%d] listProvidersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListProvidersInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListProvidersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
