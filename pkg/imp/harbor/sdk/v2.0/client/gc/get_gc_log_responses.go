// Code generated by go-swagger; DO NOT EDIT.

package gc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// GetGCLogReader is a Reader for the GetGCLog structure.
type GetGCLogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetGCLogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetGCLogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetGCLogBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetGCLogUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetGCLogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetGCLogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetGCLogInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetGCLogOK creates a GetGCLogOK with default headers values
func NewGetGCLogOK() *GetGCLogOK {
	return &GetGCLogOK{}
}

/*
GetGCLogOK describes a response with status code 200, with default header values.

Get successfully.
*/
type GetGCLogOK struct {
	Payload string
}

// IsSuccess returns true when this get Gc log o k response has a 2xx status code
func (o *GetGCLogOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Gc log o k response has a 3xx status code
func (o *GetGCLogOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log o k response has a 4xx status code
func (o *GetGCLogOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Gc log o k response has a 5xx status code
func (o *GetGCLogOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Gc log o k response a status code equal to that given
func (o *GetGCLogOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetGCLogOK) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogOK  %+v", 200, o.Payload)
}

func (o *GetGCLogOK) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogOK  %+v", 200, o.Payload)
}

func (o *GetGCLogOK) GetPayload() string {
	return o.Payload
}

func (o *GetGCLogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGCLogBadRequest creates a GetGCLogBadRequest with default headers values
func NewGetGCLogBadRequest() *GetGCLogBadRequest {
	return &GetGCLogBadRequest{}
}

/*
GetGCLogBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetGCLogBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get Gc log bad request response has a 2xx status code
func (o *GetGCLogBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Gc log bad request response has a 3xx status code
func (o *GetGCLogBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log bad request response has a 4xx status code
func (o *GetGCLogBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Gc log bad request response has a 5xx status code
func (o *GetGCLogBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get Gc log bad request response a status code equal to that given
func (o *GetGCLogBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetGCLogBadRequest) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetGCLogBadRequest) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogBadRequest  %+v", 400, o.Payload)
}

func (o *GetGCLogBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetGCLogBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGCLogUnauthorized creates a GetGCLogUnauthorized with default headers values
func NewGetGCLogUnauthorized() *GetGCLogUnauthorized {
	return &GetGCLogUnauthorized{}
}

/*
GetGCLogUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetGCLogUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get Gc log unauthorized response has a 2xx status code
func (o *GetGCLogUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Gc log unauthorized response has a 3xx status code
func (o *GetGCLogUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log unauthorized response has a 4xx status code
func (o *GetGCLogUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Gc log unauthorized response has a 5xx status code
func (o *GetGCLogUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Gc log unauthorized response a status code equal to that given
func (o *GetGCLogUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetGCLogUnauthorized) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGCLogUnauthorized) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogUnauthorized  %+v", 401, o.Payload)
}

func (o *GetGCLogUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetGCLogUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGCLogForbidden creates a GetGCLogForbidden with default headers values
func NewGetGCLogForbidden() *GetGCLogForbidden {
	return &GetGCLogForbidden{}
}

/*
GetGCLogForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetGCLogForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get Gc log forbidden response has a 2xx status code
func (o *GetGCLogForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Gc log forbidden response has a 3xx status code
func (o *GetGCLogForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log forbidden response has a 4xx status code
func (o *GetGCLogForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Gc log forbidden response has a 5xx status code
func (o *GetGCLogForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get Gc log forbidden response a status code equal to that given
func (o *GetGCLogForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetGCLogForbidden) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogForbidden  %+v", 403, o.Payload)
}

func (o *GetGCLogForbidden) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogForbidden  %+v", 403, o.Payload)
}

func (o *GetGCLogForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetGCLogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGCLogNotFound creates a GetGCLogNotFound with default headers values
func NewGetGCLogNotFound() *GetGCLogNotFound {
	return &GetGCLogNotFound{}
}

/*
GetGCLogNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetGCLogNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get Gc log not found response has a 2xx status code
func (o *GetGCLogNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Gc log not found response has a 3xx status code
func (o *GetGCLogNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log not found response has a 4xx status code
func (o *GetGCLogNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Gc log not found response has a 5xx status code
func (o *GetGCLogNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get Gc log not found response a status code equal to that given
func (o *GetGCLogNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetGCLogNotFound) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogNotFound  %+v", 404, o.Payload)
}

func (o *GetGCLogNotFound) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogNotFound  %+v", 404, o.Payload)
}

func (o *GetGCLogNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetGCLogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetGCLogInternalServerError creates a GetGCLogInternalServerError with default headers values
func NewGetGCLogInternalServerError() *GetGCLogInternalServerError {
	return &GetGCLogInternalServerError{}
}

/*
GetGCLogInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetGCLogInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get Gc log internal server error response has a 2xx status code
func (o *GetGCLogInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Gc log internal server error response has a 3xx status code
func (o *GetGCLogInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Gc log internal server error response has a 4xx status code
func (o *GetGCLogInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Gc log internal server error response has a 5xx status code
func (o *GetGCLogInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get Gc log internal server error response a status code equal to that given
func (o *GetGCLogInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetGCLogInternalServerError) Error() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGCLogInternalServerError) String() string {
	return fmt.Sprintf("[GET /system/gc/{gc_id}/log][%d] getGcLogInternalServerError  %+v", 500, o.Payload)
}

func (o *GetGCLogInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetGCLogInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
