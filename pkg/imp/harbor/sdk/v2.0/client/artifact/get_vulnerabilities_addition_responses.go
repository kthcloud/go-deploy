// Code generated by go-swagger; DO NOT EDIT.

package artifact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// GetVulnerabilitiesAdditionReader is a Reader for the GetVulnerabilitiesAddition structure.
type GetVulnerabilitiesAdditionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVulnerabilitiesAdditionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVulnerabilitiesAdditionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetVulnerabilitiesAdditionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetVulnerabilitiesAdditionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVulnerabilitiesAdditionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVulnerabilitiesAdditionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVulnerabilitiesAdditionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetVulnerabilitiesAdditionOK creates a GetVulnerabilitiesAdditionOK with default headers values
func NewGetVulnerabilitiesAdditionOK() *GetVulnerabilitiesAdditionOK {
	return &GetVulnerabilitiesAdditionOK{}
}

/*
GetVulnerabilitiesAdditionOK describes a response with status code 200, with default header values.

Success
*/
type GetVulnerabilitiesAdditionOK struct {

	/* The content type of the vulnerabilities addition
	 */
	ContentType string

	Payload string
}

// IsSuccess returns true when this get vulnerabilities addition o k response has a 2xx status code
func (o *GetVulnerabilitiesAdditionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get vulnerabilities addition o k response has a 3xx status code
func (o *GetVulnerabilitiesAdditionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition o k response has a 4xx status code
func (o *GetVulnerabilitiesAdditionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vulnerabilities addition o k response has a 5xx status code
func (o *GetVulnerabilitiesAdditionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get vulnerabilities addition o k response a status code equal to that given
func (o *GetVulnerabilitiesAdditionOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetVulnerabilitiesAdditionOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionOK  %+v", 200, o.Payload)
}

func (o *GetVulnerabilitiesAdditionOK) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionOK  %+v", 200, o.Payload)
}

func (o *GetVulnerabilitiesAdditionOK) GetPayload() string {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Type
	hdrContentType := response.GetHeader("Content-Type")

	if hdrContentType != "" {
		o.ContentType = hdrContentType
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesAdditionBadRequest creates a GetVulnerabilitiesAdditionBadRequest with default headers values
func NewGetVulnerabilitiesAdditionBadRequest() *GetVulnerabilitiesAdditionBadRequest {
	return &GetVulnerabilitiesAdditionBadRequest{}
}

/*
GetVulnerabilitiesAdditionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetVulnerabilitiesAdditionBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get vulnerabilities addition bad request response has a 2xx status code
func (o *GetVulnerabilitiesAdditionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vulnerabilities addition bad request response has a 3xx status code
func (o *GetVulnerabilitiesAdditionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition bad request response has a 4xx status code
func (o *GetVulnerabilitiesAdditionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vulnerabilities addition bad request response has a 5xx status code
func (o *GetVulnerabilitiesAdditionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get vulnerabilities addition bad request response a status code equal to that given
func (o *GetVulnerabilitiesAdditionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetVulnerabilitiesAdditionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionBadRequest  %+v", 400, o.Payload)
}

func (o *GetVulnerabilitiesAdditionBadRequest) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionBadRequest  %+v", 400, o.Payload)
}

func (o *GetVulnerabilitiesAdditionBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesAdditionUnauthorized creates a GetVulnerabilitiesAdditionUnauthorized with default headers values
func NewGetVulnerabilitiesAdditionUnauthorized() *GetVulnerabilitiesAdditionUnauthorized {
	return &GetVulnerabilitiesAdditionUnauthorized{}
}

/*
GetVulnerabilitiesAdditionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVulnerabilitiesAdditionUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get vulnerabilities addition unauthorized response has a 2xx status code
func (o *GetVulnerabilitiesAdditionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vulnerabilities addition unauthorized response has a 3xx status code
func (o *GetVulnerabilitiesAdditionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition unauthorized response has a 4xx status code
func (o *GetVulnerabilitiesAdditionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vulnerabilities addition unauthorized response has a 5xx status code
func (o *GetVulnerabilitiesAdditionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get vulnerabilities addition unauthorized response a status code equal to that given
func (o *GetVulnerabilitiesAdditionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetVulnerabilitiesAdditionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVulnerabilitiesAdditionUnauthorized) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVulnerabilitiesAdditionUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesAdditionForbidden creates a GetVulnerabilitiesAdditionForbidden with default headers values
func NewGetVulnerabilitiesAdditionForbidden() *GetVulnerabilitiesAdditionForbidden {
	return &GetVulnerabilitiesAdditionForbidden{}
}

/*
GetVulnerabilitiesAdditionForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVulnerabilitiesAdditionForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get vulnerabilities addition forbidden response has a 2xx status code
func (o *GetVulnerabilitiesAdditionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vulnerabilities addition forbidden response has a 3xx status code
func (o *GetVulnerabilitiesAdditionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition forbidden response has a 4xx status code
func (o *GetVulnerabilitiesAdditionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vulnerabilities addition forbidden response has a 5xx status code
func (o *GetVulnerabilitiesAdditionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get vulnerabilities addition forbidden response a status code equal to that given
func (o *GetVulnerabilitiesAdditionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetVulnerabilitiesAdditionForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionForbidden  %+v", 403, o.Payload)
}

func (o *GetVulnerabilitiesAdditionForbidden) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionForbidden  %+v", 403, o.Payload)
}

func (o *GetVulnerabilitiesAdditionForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesAdditionNotFound creates a GetVulnerabilitiesAdditionNotFound with default headers values
func NewGetVulnerabilitiesAdditionNotFound() *GetVulnerabilitiesAdditionNotFound {
	return &GetVulnerabilitiesAdditionNotFound{}
}

/*
GetVulnerabilitiesAdditionNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetVulnerabilitiesAdditionNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get vulnerabilities addition not found response has a 2xx status code
func (o *GetVulnerabilitiesAdditionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vulnerabilities addition not found response has a 3xx status code
func (o *GetVulnerabilitiesAdditionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition not found response has a 4xx status code
func (o *GetVulnerabilitiesAdditionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get vulnerabilities addition not found response has a 5xx status code
func (o *GetVulnerabilitiesAdditionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get vulnerabilities addition not found response a status code equal to that given
func (o *GetVulnerabilitiesAdditionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetVulnerabilitiesAdditionNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionNotFound  %+v", 404, o.Payload)
}

func (o *GetVulnerabilitiesAdditionNotFound) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionNotFound  %+v", 404, o.Payload)
}

func (o *GetVulnerabilitiesAdditionNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVulnerabilitiesAdditionInternalServerError creates a GetVulnerabilitiesAdditionInternalServerError with default headers values
func NewGetVulnerabilitiesAdditionInternalServerError() *GetVulnerabilitiesAdditionInternalServerError {
	return &GetVulnerabilitiesAdditionInternalServerError{}
}

/*
GetVulnerabilitiesAdditionInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetVulnerabilitiesAdditionInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get vulnerabilities addition internal server error response has a 2xx status code
func (o *GetVulnerabilitiesAdditionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get vulnerabilities addition internal server error response has a 3xx status code
func (o *GetVulnerabilitiesAdditionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get vulnerabilities addition internal server error response has a 4xx status code
func (o *GetVulnerabilitiesAdditionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get vulnerabilities addition internal server error response has a 5xx status code
func (o *GetVulnerabilitiesAdditionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get vulnerabilities addition internal server error response a status code equal to that given
func (o *GetVulnerabilitiesAdditionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetVulnerabilitiesAdditionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVulnerabilitiesAdditionInternalServerError) String() string {
	return fmt.Sprintf("[GET /projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/vulnerabilities][%d] getVulnerabilitiesAdditionInternalServerError  %+v", 500, o.Payload)
}

func (o *GetVulnerabilitiesAdditionInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetVulnerabilitiesAdditionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
