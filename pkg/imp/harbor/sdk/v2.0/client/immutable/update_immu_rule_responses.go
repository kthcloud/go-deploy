// Code generated by go-swagger; DO NOT EDIT.

package immutable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// UpdateImmuRuleReader is a Reader for the UpdateImmuRule structure.
type UpdateImmuRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateImmuRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateImmuRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateImmuRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateImmuRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateImmuRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateImmuRuleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateImmuRuleOK creates a UpdateImmuRuleOK with default headers values
func NewUpdateImmuRuleOK() *UpdateImmuRuleOK {
	return &UpdateImmuRuleOK{}
}

/*
UpdateImmuRuleOK describes a response with status code 200, with default header values.

Success
*/
type UpdateImmuRuleOK struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this update immu rule o k response has a 2xx status code
func (o *UpdateImmuRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update immu rule o k response has a 3xx status code
func (o *UpdateImmuRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update immu rule o k response has a 4xx status code
func (o *UpdateImmuRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update immu rule o k response has a 5xx status code
func (o *UpdateImmuRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update immu rule o k response a status code equal to that given
func (o *UpdateImmuRuleOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateImmuRuleOK) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleOK ", 200)
}

func (o *UpdateImmuRuleOK) String() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleOK ", 200)
}

func (o *UpdateImmuRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewUpdateImmuRuleBadRequest creates a UpdateImmuRuleBadRequest with default headers values
func NewUpdateImmuRuleBadRequest() *UpdateImmuRuleBadRequest {
	return &UpdateImmuRuleBadRequest{}
}

/*
UpdateImmuRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateImmuRuleBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update immu rule bad request response has a 2xx status code
func (o *UpdateImmuRuleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update immu rule bad request response has a 3xx status code
func (o *UpdateImmuRuleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update immu rule bad request response has a 4xx status code
func (o *UpdateImmuRuleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update immu rule bad request response has a 5xx status code
func (o *UpdateImmuRuleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update immu rule bad request response a status code equal to that given
func (o *UpdateImmuRuleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateImmuRuleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateImmuRuleBadRequest) String() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateImmuRuleBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateImmuRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImmuRuleUnauthorized creates a UpdateImmuRuleUnauthorized with default headers values
func NewUpdateImmuRuleUnauthorized() *UpdateImmuRuleUnauthorized {
	return &UpdateImmuRuleUnauthorized{}
}

/*
UpdateImmuRuleUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateImmuRuleUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update immu rule unauthorized response has a 2xx status code
func (o *UpdateImmuRuleUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update immu rule unauthorized response has a 3xx status code
func (o *UpdateImmuRuleUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update immu rule unauthorized response has a 4xx status code
func (o *UpdateImmuRuleUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update immu rule unauthorized response has a 5xx status code
func (o *UpdateImmuRuleUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update immu rule unauthorized response a status code equal to that given
func (o *UpdateImmuRuleUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateImmuRuleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateImmuRuleUnauthorized) String() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateImmuRuleUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateImmuRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImmuRuleForbidden creates a UpdateImmuRuleForbidden with default headers values
func NewUpdateImmuRuleForbidden() *UpdateImmuRuleForbidden {
	return &UpdateImmuRuleForbidden{}
}

/*
UpdateImmuRuleForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateImmuRuleForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update immu rule forbidden response has a 2xx status code
func (o *UpdateImmuRuleForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update immu rule forbidden response has a 3xx status code
func (o *UpdateImmuRuleForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update immu rule forbidden response has a 4xx status code
func (o *UpdateImmuRuleForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update immu rule forbidden response has a 5xx status code
func (o *UpdateImmuRuleForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update immu rule forbidden response a status code equal to that given
func (o *UpdateImmuRuleForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateImmuRuleForbidden) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateImmuRuleForbidden) String() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateImmuRuleForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateImmuRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateImmuRuleInternalServerError creates a UpdateImmuRuleInternalServerError with default headers values
func NewUpdateImmuRuleInternalServerError() *UpdateImmuRuleInternalServerError {
	return &UpdateImmuRuleInternalServerError{}
}

/*
UpdateImmuRuleInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateImmuRuleInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update immu rule internal server error response has a 2xx status code
func (o *UpdateImmuRuleInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update immu rule internal server error response has a 3xx status code
func (o *UpdateImmuRuleInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update immu rule internal server error response has a 4xx status code
func (o *UpdateImmuRuleInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update immu rule internal server error response has a 5xx status code
func (o *UpdateImmuRuleInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update immu rule internal server error response a status code equal to that given
func (o *UpdateImmuRuleInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateImmuRuleInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateImmuRuleInternalServerError) String() string {
	return fmt.Sprintf("[PUT /projects/{project_name_or_id}/immutabletagrules/{immutable_rule_id}][%d] updateImmuRuleInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateImmuRuleInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateImmuRuleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
