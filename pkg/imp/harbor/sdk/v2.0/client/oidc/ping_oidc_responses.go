// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// PingOIDCReader is a Reader for the PingOIDC structure.
type PingOIDCReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PingOIDCReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPingOIDCOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPingOIDCBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPingOIDCUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPingOIDCForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPingOIDCOK creates a PingOIDCOK with default headers values
func NewPingOIDCOK() *PingOIDCOK {
	return &PingOIDCOK{}
}

/*
PingOIDCOK describes a response with status code 200, with default header values.

Success
*/
type PingOIDCOK struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this ping Oidc o k response has a 2xx status code
func (o *PingOIDCOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ping Oidc o k response has a 3xx status code
func (o *PingOIDCOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ping Oidc o k response has a 4xx status code
func (o *PingOIDCOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ping Oidc o k response has a 5xx status code
func (o *PingOIDCOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ping Oidc o k response a status code equal to that given
func (o *PingOIDCOK) IsCode(code int) bool {
	return code == 200
}

func (o *PingOIDCOK) Error() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcOK ", 200)
}

func (o *PingOIDCOK) String() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcOK ", 200)
}

func (o *PingOIDCOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewPingOIDCBadRequest creates a PingOIDCBadRequest with default headers values
func NewPingOIDCBadRequest() *PingOIDCBadRequest {
	return &PingOIDCBadRequest{}
}

/*
PingOIDCBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PingOIDCBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this ping Oidc bad request response has a 2xx status code
func (o *PingOIDCBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ping Oidc bad request response has a 3xx status code
func (o *PingOIDCBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ping Oidc bad request response has a 4xx status code
func (o *PingOIDCBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this ping Oidc bad request response has a 5xx status code
func (o *PingOIDCBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this ping Oidc bad request response a status code equal to that given
func (o *PingOIDCBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PingOIDCBadRequest) Error() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcBadRequest  %+v", 400, o.Payload)
}

func (o *PingOIDCBadRequest) String() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcBadRequest  %+v", 400, o.Payload)
}

func (o *PingOIDCBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PingOIDCBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPingOIDCUnauthorized creates a PingOIDCUnauthorized with default headers values
func NewPingOIDCUnauthorized() *PingOIDCUnauthorized {
	return &PingOIDCUnauthorized{}
}

/*
PingOIDCUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PingOIDCUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this ping Oidc unauthorized response has a 2xx status code
func (o *PingOIDCUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ping Oidc unauthorized response has a 3xx status code
func (o *PingOIDCUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ping Oidc unauthorized response has a 4xx status code
func (o *PingOIDCUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this ping Oidc unauthorized response has a 5xx status code
func (o *PingOIDCUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this ping Oidc unauthorized response a status code equal to that given
func (o *PingOIDCUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PingOIDCUnauthorized) Error() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcUnauthorized  %+v", 401, o.Payload)
}

func (o *PingOIDCUnauthorized) String() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcUnauthorized  %+v", 401, o.Payload)
}

func (o *PingOIDCUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PingOIDCUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPingOIDCForbidden creates a PingOIDCForbidden with default headers values
func NewPingOIDCForbidden() *PingOIDCForbidden {
	return &PingOIDCForbidden{}
}

/*
PingOIDCForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PingOIDCForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this ping Oidc forbidden response has a 2xx status code
func (o *PingOIDCForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ping Oidc forbidden response has a 3xx status code
func (o *PingOIDCForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ping Oidc forbidden response has a 4xx status code
func (o *PingOIDCForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this ping Oidc forbidden response has a 5xx status code
func (o *PingOIDCForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this ping Oidc forbidden response a status code equal to that given
func (o *PingOIDCForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PingOIDCForbidden) Error() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcForbidden  %+v", 403, o.Payload)
}

func (o *PingOIDCForbidden) String() string {
	return fmt.Sprintf("[POST /system/oidc/ping][%d] pingOidcForbidden  %+v", 403, o.Payload)
}

func (o *PingOIDCForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *PingOIDCForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PingOIDCBody ping OIDC body
swagger:model PingOIDCBody
*/
type PingOIDCBody struct {

	// The URL of OIDC endpoint to be tested.
	URL string `json:"url,omitempty"`

	// Whether the certificate should be verified
	VerifyCert bool `json:"verify_cert,omitempty"`
}

// Validate validates this ping OIDC body
func (o *PingOIDCBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ping OIDC body based on context it is used
func (o *PingOIDCBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PingOIDCBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PingOIDCBody) UnmarshalBinary(b []byte) error {
	var res PingOIDCBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
