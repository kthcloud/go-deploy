// Code generated by go-swagger; DO NOT EDIT.

package robot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// GetRobotByIDReader is a Reader for the GetRobotByID structure.
type GetRobotByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRobotByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRobotByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRobotByIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRobotByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRobotByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRobotByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRobotByIDOK creates a GetRobotByIDOK with default headers values
func NewGetRobotByIDOK() *GetRobotByIDOK {
	return &GetRobotByIDOK{}
}

/*
GetRobotByIDOK describes a response with status code 200, with default header values.

Return matched robot information.
*/
type GetRobotByIDOK struct {
	Payload *models.Robot
}

// IsSuccess returns true when this get robot by Id o k response has a 2xx status code
func (o *GetRobotByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get robot by Id o k response has a 3xx status code
func (o *GetRobotByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get robot by Id o k response has a 4xx status code
func (o *GetRobotByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get robot by Id o k response has a 5xx status code
func (o *GetRobotByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get robot by Id o k response a status code equal to that given
func (o *GetRobotByIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetRobotByIDOK) Error() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdOK  %+v", 200, o.Payload)
}

func (o *GetRobotByIDOK) String() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdOK  %+v", 200, o.Payload)
}

func (o *GetRobotByIDOK) GetPayload() *models.Robot {
	return o.Payload
}

func (o *GetRobotByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Robot)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRobotByIDUnauthorized creates a GetRobotByIDUnauthorized with default headers values
func NewGetRobotByIDUnauthorized() *GetRobotByIDUnauthorized {
	return &GetRobotByIDUnauthorized{}
}

/*
GetRobotByIDUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRobotByIDUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get robot by Id unauthorized response has a 2xx status code
func (o *GetRobotByIDUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get robot by Id unauthorized response has a 3xx status code
func (o *GetRobotByIDUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get robot by Id unauthorized response has a 4xx status code
func (o *GetRobotByIDUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get robot by Id unauthorized response has a 5xx status code
func (o *GetRobotByIDUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get robot by Id unauthorized response a status code equal to that given
func (o *GetRobotByIDUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetRobotByIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRobotByIDUnauthorized) String() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRobotByIDUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetRobotByIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRobotByIDForbidden creates a GetRobotByIDForbidden with default headers values
func NewGetRobotByIDForbidden() *GetRobotByIDForbidden {
	return &GetRobotByIDForbidden{}
}

/*
GetRobotByIDForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRobotByIDForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get robot by Id forbidden response has a 2xx status code
func (o *GetRobotByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get robot by Id forbidden response has a 3xx status code
func (o *GetRobotByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get robot by Id forbidden response has a 4xx status code
func (o *GetRobotByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get robot by Id forbidden response has a 5xx status code
func (o *GetRobotByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get robot by Id forbidden response a status code equal to that given
func (o *GetRobotByIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetRobotByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRobotByIDForbidden) String() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdForbidden  %+v", 403, o.Payload)
}

func (o *GetRobotByIDForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetRobotByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRobotByIDNotFound creates a GetRobotByIDNotFound with default headers values
func NewGetRobotByIDNotFound() *GetRobotByIDNotFound {
	return &GetRobotByIDNotFound{}
}

/*
GetRobotByIDNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetRobotByIDNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get robot by Id not found response has a 2xx status code
func (o *GetRobotByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get robot by Id not found response has a 3xx status code
func (o *GetRobotByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get robot by Id not found response has a 4xx status code
func (o *GetRobotByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get robot by Id not found response has a 5xx status code
func (o *GetRobotByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get robot by Id not found response a status code equal to that given
func (o *GetRobotByIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetRobotByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRobotByIDNotFound) String() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdNotFound  %+v", 404, o.Payload)
}

func (o *GetRobotByIDNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetRobotByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRobotByIDInternalServerError creates a GetRobotByIDInternalServerError with default headers values
func NewGetRobotByIDInternalServerError() *GetRobotByIDInternalServerError {
	return &GetRobotByIDInternalServerError{}
}

/*
GetRobotByIDInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetRobotByIDInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this get robot by Id internal server error response has a 2xx status code
func (o *GetRobotByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get robot by Id internal server error response has a 3xx status code
func (o *GetRobotByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get robot by Id internal server error response has a 4xx status code
func (o *GetRobotByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get robot by Id internal server error response has a 5xx status code
func (o *GetRobotByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get robot by Id internal server error response a status code equal to that given
func (o *GetRobotByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetRobotByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRobotByIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /robots/{robot_id}][%d] getRobotByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetRobotByIDInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *GetRobotByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
