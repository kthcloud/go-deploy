// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// ListUsersReader is a Reader for the ListUsers structure.
type ListUsersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListUsersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListUsersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListUsersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListUsersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListUsersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListUsersOK creates a ListUsersOK with default headers values
func NewListUsersOK() *ListUsersOK {
	return &ListUsersOK{}
}

/*
ListUsersOK describes a response with status code 200, with default header values.

return the list of users.
*/
type ListUsersOK struct {

	/* Link to previous page and next page
	 */
	Link string

	/* The total count of users
	 */
	XTotalCount int64

	Payload []*models.UserResp
}

// IsSuccess returns true when this list users o k response has a 2xx status code
func (o *ListUsersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list users o k response has a 3xx status code
func (o *ListUsersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users o k response has a 4xx status code
func (o *ListUsersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list users o k response has a 5xx status code
func (o *ListUsersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list users o k response a status code equal to that given
func (o *ListUsersOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListUsersOK) Error() string {
	return fmt.Sprintf("[GET /users][%d] listUsersOK  %+v", 200, o.Payload)
}

func (o *ListUsersOK) String() string {
	return fmt.Sprintf("[GET /users][%d] listUsersOK  %+v", 200, o.Payload)
}

func (o *ListUsersOK) GetPayload() []*models.UserResp {
	return o.Payload
}

func (o *ListUsersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Link
	hdrLink := response.GetHeader("Link")

	if hdrLink != "" {
		o.Link = hdrLink
	}

	// hydrates response header X-Total-Count
	hdrXTotalCount := response.GetHeader("X-Total-Count")

	if hdrXTotalCount != "" {
		valxTotalCount, err := swag.ConvertInt64(hdrXTotalCount)
		if err != nil {
			return errors.InvalidType("X-Total-Count", "header", "int64", hdrXTotalCount)
		}
		o.XTotalCount = valxTotalCount
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersUnauthorized creates a ListUsersUnauthorized with default headers values
func NewListUsersUnauthorized() *ListUsersUnauthorized {
	return &ListUsersUnauthorized{}
}

/*
ListUsersUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListUsersUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list users unauthorized response has a 2xx status code
func (o *ListUsersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users unauthorized response has a 3xx status code
func (o *ListUsersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users unauthorized response has a 4xx status code
func (o *ListUsersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users unauthorized response has a 5xx status code
func (o *ListUsersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list users unauthorized response a status code equal to that given
func (o *ListUsersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListUsersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users][%d] listUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUsersUnauthorized) String() string {
	return fmt.Sprintf("[GET /users][%d] listUsersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListUsersUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUsersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersForbidden creates a ListUsersForbidden with default headers values
func NewListUsersForbidden() *ListUsersForbidden {
	return &ListUsersForbidden{}
}

/*
ListUsersForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ListUsersForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list users forbidden response has a 2xx status code
func (o *ListUsersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users forbidden response has a 3xx status code
func (o *ListUsersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users forbidden response has a 4xx status code
func (o *ListUsersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list users forbidden response has a 5xx status code
func (o *ListUsersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list users forbidden response a status code equal to that given
func (o *ListUsersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListUsersForbidden) Error() string {
	return fmt.Sprintf("[GET /users][%d] listUsersForbidden  %+v", 403, o.Payload)
}

func (o *ListUsersForbidden) String() string {
	return fmt.Sprintf("[GET /users][%d] listUsersForbidden  %+v", 403, o.Payload)
}

func (o *ListUsersForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUsersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListUsersInternalServerError creates a ListUsersInternalServerError with default headers values
func NewListUsersInternalServerError() *ListUsersInternalServerError {
	return &ListUsersInternalServerError{}
}

/*
ListUsersInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ListUsersInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this list users internal server error response has a 2xx status code
func (o *ListUsersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list users internal server error response has a 3xx status code
func (o *ListUsersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list users internal server error response has a 4xx status code
func (o *ListUsersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list users internal server error response has a 5xx status code
func (o *ListUsersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list users internal server error response a status code equal to that given
func (o *ListUsersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListUsersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users][%d] listUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUsersInternalServerError) String() string {
	return fmt.Sprintf("[GET /users][%d] listUsersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListUsersInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *ListUsersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
