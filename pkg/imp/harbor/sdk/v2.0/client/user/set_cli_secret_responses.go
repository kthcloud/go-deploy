// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// SetCliSecretReader is a Reader for the SetCliSecret structure.
type SetCliSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetCliSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSetCliSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetCliSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSetCliSecretUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetCliSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetCliSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewSetCliSecretPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetCliSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetCliSecretOK creates a SetCliSecretOK with default headers values
func NewSetCliSecretOK() *SetCliSecretOK {
	return &SetCliSecretOK{}
}

/*
SetCliSecretOK describes a response with status code 200, with default header values.

The secret is successfully updated
*/
type SetCliSecretOK struct {
}

// IsSuccess returns true when this set cli secret o k response has a 2xx status code
func (o *SetCliSecretOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set cli secret o k response has a 3xx status code
func (o *SetCliSecretOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret o k response has a 4xx status code
func (o *SetCliSecretOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this set cli secret o k response has a 5xx status code
func (o *SetCliSecretOK) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret o k response a status code equal to that given
func (o *SetCliSecretOK) IsCode(code int) bool {
	return code == 200
}

func (o *SetCliSecretOK) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretOK ", 200)
}

func (o *SetCliSecretOK) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretOK ", 200)
}

func (o *SetCliSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetCliSecretBadRequest creates a SetCliSecretBadRequest with default headers values
func NewSetCliSecretBadRequest() *SetCliSecretBadRequest {
	return &SetCliSecretBadRequest{}
}

/*
SetCliSecretBadRequest describes a response with status code 400, with default header values.

Invalid user ID.  Or user is not onboarded via OIDC authentication. Or the secret does not meet the standard.
*/
type SetCliSecretBadRequest struct {
}

// IsSuccess returns true when this set cli secret bad request response has a 2xx status code
func (o *SetCliSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret bad request response has a 3xx status code
func (o *SetCliSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret bad request response has a 4xx status code
func (o *SetCliSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cli secret bad request response has a 5xx status code
func (o *SetCliSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret bad request response a status code equal to that given
func (o *SetCliSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SetCliSecretBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretBadRequest ", 400)
}

func (o *SetCliSecretBadRequest) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretBadRequest ", 400)
}

func (o *SetCliSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetCliSecretUnauthorized creates a SetCliSecretUnauthorized with default headers values
func NewSetCliSecretUnauthorized() *SetCliSecretUnauthorized {
	return &SetCliSecretUnauthorized{}
}

/*
SetCliSecretUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SetCliSecretUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this set cli secret unauthorized response has a 2xx status code
func (o *SetCliSecretUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret unauthorized response has a 3xx status code
func (o *SetCliSecretUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret unauthorized response has a 4xx status code
func (o *SetCliSecretUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cli secret unauthorized response has a 5xx status code
func (o *SetCliSecretUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret unauthorized response a status code equal to that given
func (o *SetCliSecretUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SetCliSecretUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *SetCliSecretUnauthorized) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretUnauthorized  %+v", 401, o.Payload)
}

func (o *SetCliSecretUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SetCliSecretUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCliSecretForbidden creates a SetCliSecretForbidden with default headers values
func NewSetCliSecretForbidden() *SetCliSecretForbidden {
	return &SetCliSecretForbidden{}
}

/*
SetCliSecretForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SetCliSecretForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this set cli secret forbidden response has a 2xx status code
func (o *SetCliSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret forbidden response has a 3xx status code
func (o *SetCliSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret forbidden response has a 4xx status code
func (o *SetCliSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cli secret forbidden response has a 5xx status code
func (o *SetCliSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret forbidden response a status code equal to that given
func (o *SetCliSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SetCliSecretForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretForbidden  %+v", 403, o.Payload)
}

func (o *SetCliSecretForbidden) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretForbidden  %+v", 403, o.Payload)
}

func (o *SetCliSecretForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SetCliSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCliSecretNotFound creates a SetCliSecretNotFound with default headers values
func NewSetCliSecretNotFound() *SetCliSecretNotFound {
	return &SetCliSecretNotFound{}
}

/*
SetCliSecretNotFound describes a response with status code 404, with default header values.

Not found
*/
type SetCliSecretNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this set cli secret not found response has a 2xx status code
func (o *SetCliSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret not found response has a 3xx status code
func (o *SetCliSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret not found response has a 4xx status code
func (o *SetCliSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cli secret not found response has a 5xx status code
func (o *SetCliSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret not found response a status code equal to that given
func (o *SetCliSecretNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SetCliSecretNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretNotFound  %+v", 404, o.Payload)
}

func (o *SetCliSecretNotFound) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretNotFound  %+v", 404, o.Payload)
}

func (o *SetCliSecretNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SetCliSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetCliSecretPreconditionFailed creates a SetCliSecretPreconditionFailed with default headers values
func NewSetCliSecretPreconditionFailed() *SetCliSecretPreconditionFailed {
	return &SetCliSecretPreconditionFailed{}
}

/*
SetCliSecretPreconditionFailed describes a response with status code 412, with default header values.

The auth mode of the system is not "oidc_auth", or the user is not onboarded via OIDC AuthN.
*/
type SetCliSecretPreconditionFailed struct {
}

// IsSuccess returns true when this set cli secret precondition failed response has a 2xx status code
func (o *SetCliSecretPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret precondition failed response has a 3xx status code
func (o *SetCliSecretPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret precondition failed response has a 4xx status code
func (o *SetCliSecretPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this set cli secret precondition failed response has a 5xx status code
func (o *SetCliSecretPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this set cli secret precondition failed response a status code equal to that given
func (o *SetCliSecretPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

func (o *SetCliSecretPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretPreconditionFailed ", 412)
}

func (o *SetCliSecretPreconditionFailed) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretPreconditionFailed ", 412)
}

func (o *SetCliSecretPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetCliSecretInternalServerError creates a SetCliSecretInternalServerError with default headers values
func NewSetCliSecretInternalServerError() *SetCliSecretInternalServerError {
	return &SetCliSecretInternalServerError{}
}

/*
SetCliSecretInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type SetCliSecretInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this set cli secret internal server error response has a 2xx status code
func (o *SetCliSecretInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set cli secret internal server error response has a 3xx status code
func (o *SetCliSecretInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set cli secret internal server error response has a 4xx status code
func (o *SetCliSecretInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set cli secret internal server error response has a 5xx status code
func (o *SetCliSecretInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set cli secret internal server error response a status code equal to that given
func (o *SetCliSecretInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SetCliSecretInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCliSecretInternalServerError) String() string {
	return fmt.Sprintf("[PUT /users/{user_id}/cli_secret][%d] setCliSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *SetCliSecretInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *SetCliSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
