// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// UpdateScannerReader is a Reader for the UpdateScanner structure.
type UpdateScannerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScannerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScannerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateScannerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateScannerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScannerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateScannerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateScannerOK creates a UpdateScannerOK with default headers values
func NewUpdateScannerOK() *UpdateScannerOK {
	return &UpdateScannerOK{}
}

/*
UpdateScannerOK describes a response with status code 200, with default header values.

Success
*/
type UpdateScannerOK struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string
}

// IsSuccess returns true when this update scanner o k response has a 2xx status code
func (o *UpdateScannerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update scanner o k response has a 3xx status code
func (o *UpdateScannerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scanner o k response has a 4xx status code
func (o *UpdateScannerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update scanner o k response has a 5xx status code
func (o *UpdateScannerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update scanner o k response a status code equal to that given
func (o *UpdateScannerOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateScannerOK) Error() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerOK ", 200)
}

func (o *UpdateScannerOK) String() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerOK ", 200)
}

func (o *UpdateScannerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	return nil
}

// NewUpdateScannerUnauthorized creates a UpdateScannerUnauthorized with default headers values
func NewUpdateScannerUnauthorized() *UpdateScannerUnauthorized {
	return &UpdateScannerUnauthorized{}
}

/*
UpdateScannerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateScannerUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update scanner unauthorized response has a 2xx status code
func (o *UpdateScannerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scanner unauthorized response has a 3xx status code
func (o *UpdateScannerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scanner unauthorized response has a 4xx status code
func (o *UpdateScannerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scanner unauthorized response has a 5xx status code
func (o *UpdateScannerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update scanner unauthorized response a status code equal to that given
func (o *UpdateScannerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UpdateScannerUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScannerUnauthorized) String() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScannerUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateScannerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScannerForbidden creates a UpdateScannerForbidden with default headers values
func NewUpdateScannerForbidden() *UpdateScannerForbidden {
	return &UpdateScannerForbidden{}
}

/*
UpdateScannerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateScannerForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update scanner forbidden response has a 2xx status code
func (o *UpdateScannerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scanner forbidden response has a 3xx status code
func (o *UpdateScannerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scanner forbidden response has a 4xx status code
func (o *UpdateScannerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scanner forbidden response has a 5xx status code
func (o *UpdateScannerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update scanner forbidden response a status code equal to that given
func (o *UpdateScannerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateScannerForbidden) Error() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScannerForbidden) String() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScannerForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateScannerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScannerNotFound creates a UpdateScannerNotFound with default headers values
func NewUpdateScannerNotFound() *UpdateScannerNotFound {
	return &UpdateScannerNotFound{}
}

/*
UpdateScannerNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateScannerNotFound struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update scanner not found response has a 2xx status code
func (o *UpdateScannerNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scanner not found response has a 3xx status code
func (o *UpdateScannerNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scanner not found response has a 4xx status code
func (o *UpdateScannerNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update scanner not found response has a 5xx status code
func (o *UpdateScannerNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update scanner not found response a status code equal to that given
func (o *UpdateScannerNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateScannerNotFound) Error() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScannerNotFound) String() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScannerNotFound) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateScannerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScannerInternalServerError creates a UpdateScannerInternalServerError with default headers values
func NewUpdateScannerInternalServerError() *UpdateScannerInternalServerError {
	return &UpdateScannerInternalServerError{}
}

/*
UpdateScannerInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type UpdateScannerInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this update scanner internal server error response has a 2xx status code
func (o *UpdateScannerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update scanner internal server error response has a 3xx status code
func (o *UpdateScannerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update scanner internal server error response has a 4xx status code
func (o *UpdateScannerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update scanner internal server error response has a 5xx status code
func (o *UpdateScannerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update scanner internal server error response a status code equal to that given
func (o *UpdateScannerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateScannerInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScannerInternalServerError) String() string {
	return fmt.Sprintf("[PUT /scanners/{registration_id}][%d] updateScannerInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateScannerInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *UpdateScannerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
