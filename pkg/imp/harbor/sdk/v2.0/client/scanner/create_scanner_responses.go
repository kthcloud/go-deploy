// Code generated by go-swagger; DO NOT EDIT.

package scanner

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kthcloud/go-deploy/pkg/imp/harbor/sdk/v2.0/models"
)

// CreateScannerReader is a Reader for the CreateScanner structure.
type CreateScannerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScannerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateScannerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScannerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScannerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScannerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateScannerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScannerCreated creates a CreateScannerCreated with default headers values
func NewCreateScannerCreated() *CreateScannerCreated {
	return &CreateScannerCreated{}
}

/*
CreateScannerCreated describes a response with status code 201, with default header values.

Created successfully
*/
type CreateScannerCreated struct {

	/* The URL of the created resource
	 */
	Location string
}

// IsSuccess returns true when this create scanner created response has a 2xx status code
func (o *CreateScannerCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create scanner created response has a 3xx status code
func (o *CreateScannerCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scanner created response has a 4xx status code
func (o *CreateScannerCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scanner created response has a 5xx status code
func (o *CreateScannerCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create scanner created response a status code equal to that given
func (o *CreateScannerCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateScannerCreated) Error() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerCreated ", 201)
}

func (o *CreateScannerCreated) String() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerCreated ", 201)
}

func (o *CreateScannerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	return nil
}

// NewCreateScannerBadRequest creates a CreateScannerBadRequest with default headers values
func NewCreateScannerBadRequest() *CreateScannerBadRequest {
	return &CreateScannerBadRequest{}
}

/*
CreateScannerBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateScannerBadRequest struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scanner bad request response has a 2xx status code
func (o *CreateScannerBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scanner bad request response has a 3xx status code
func (o *CreateScannerBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scanner bad request response has a 4xx status code
func (o *CreateScannerBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scanner bad request response has a 5xx status code
func (o *CreateScannerBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create scanner bad request response a status code equal to that given
func (o *CreateScannerBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateScannerBadRequest) Error() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScannerBadRequest) String() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScannerBadRequest) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScannerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScannerUnauthorized creates a CreateScannerUnauthorized with default headers values
func NewCreateScannerUnauthorized() *CreateScannerUnauthorized {
	return &CreateScannerUnauthorized{}
}

/*
CreateScannerUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CreateScannerUnauthorized struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scanner unauthorized response has a 2xx status code
func (o *CreateScannerUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scanner unauthorized response has a 3xx status code
func (o *CreateScannerUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scanner unauthorized response has a 4xx status code
func (o *CreateScannerUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scanner unauthorized response has a 5xx status code
func (o *CreateScannerUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create scanner unauthorized response a status code equal to that given
func (o *CreateScannerUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateScannerUnauthorized) Error() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScannerUnauthorized) String() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScannerUnauthorized) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScannerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScannerForbidden creates a CreateScannerForbidden with default headers values
func NewCreateScannerForbidden() *CreateScannerForbidden {
	return &CreateScannerForbidden{}
}

/*
CreateScannerForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CreateScannerForbidden struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scanner forbidden response has a 2xx status code
func (o *CreateScannerForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scanner forbidden response has a 3xx status code
func (o *CreateScannerForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scanner forbidden response has a 4xx status code
func (o *CreateScannerForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scanner forbidden response has a 5xx status code
func (o *CreateScannerForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create scanner forbidden response a status code equal to that given
func (o *CreateScannerForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateScannerForbidden) Error() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerForbidden  %+v", 403, o.Payload)
}

func (o *CreateScannerForbidden) String() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerForbidden  %+v", 403, o.Payload)
}

func (o *CreateScannerForbidden) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScannerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScannerInternalServerError creates a CreateScannerInternalServerError with default headers values
func NewCreateScannerInternalServerError() *CreateScannerInternalServerError {
	return &CreateScannerInternalServerError{}
}

/*
CreateScannerInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CreateScannerInternalServerError struct {

	/* The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *models.Errors
}

// IsSuccess returns true when this create scanner internal server error response has a 2xx status code
func (o *CreateScannerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scanner internal server error response has a 3xx status code
func (o *CreateScannerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scanner internal server error response has a 4xx status code
func (o *CreateScannerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scanner internal server error response has a 5xx status code
func (o *CreateScannerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create scanner internal server error response a status code equal to that given
func (o *CreateScannerInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateScannerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScannerInternalServerError) String() string {
	return fmt.Sprintf("[POST /scanners][%d] createScannerInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScannerInternalServerError) GetPayload() *models.Errors {
	return o.Payload
}

func (o *CreateScannerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-Request-Id
	hdrXRequestID := response.GetHeader("X-Request-Id")

	if hdrXRequestID != "" {
		o.XRequestID = hdrXRequestID
	}

	o.Payload = new(models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
